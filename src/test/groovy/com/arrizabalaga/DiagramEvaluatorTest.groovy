package com.arrizabalaga

import spock.lang.Shared

/*
 * This Spock specification was auto generated by running 'gradle init --type groovy-library'
 * by 'arrizabalaga' at '6/26/14 11:55 PM' with Gradle 1.12
 *
 * @author arrizabalaga, @date 6/26/14 11:55 PM
 */
import spock.lang.Specification

class DiagramEvaluatorTest extends Specification{
    @Shared DiagramBuilder builder= new DiagramBuilder()

    final List DIAGRAM_SAMPLE=[
            [name:"A",oneAction:"B",zeroAction:"E",theEnd:false],
            [name:"B",oneAction:"B",zeroAction:"C",theEnd:false],
            [name:"C",oneAction:"E",zeroAction:"D",theEnd:false],
            [name:"D",oneAction:"D",zeroAction:"D",theEnd:false],
            [name:"E",oneAction:"E",zeroAction:"E",theEnd:true]
    ]

    def "Should find exit in one step"() {
        setup:
            Node root =builder.build(DIAGRAM_SAMPLE)
            DiagramEvaluator evaluator = new DiagramEvaluator(root,true)

            String input='0'
        when:
            boolean result=evaluator.evaluate(input)
        then:
            result == true
            evaluator.numMovements==1
    }

    def "Should not find exit"() {
        setup:
        Node root =builder.build(DIAGRAM_SAMPLE)
        DiagramEvaluator evaluator = new DiagramEvaluator(root,true)

        String input='1111'
        when:
        boolean result=evaluator.evaluate(input)
        then:
        result == false
        evaluator.numMovements==4
    }

    def "Should find exit after touching 4 nodes"() {
        setup:
        Node root =builder.build(DIAGRAM_SAMPLE)
        DiagramEvaluator evaluator = new DiagramEvaluator(root,true)

        String input='1011'
        when:
        boolean result=evaluator.evaluate(input)
        then:
        result == true
        evaluator.numMovements==3
    }

    def "Should find exit without moving"() {
        setup:
            Node root =builder.build([
                    [name:"A",theEnd:true],
            ])
            DiagramEvaluator evaluator = new DiagramEvaluator(root)
            String input='0'
        when:
            boolean result=evaluator.evaluate(input)
        then:
            result==true
            evaluator.numMovements==0
    }

}
